node n1 {
    type router
    model host
    network-config {
	hostname server
	!
	interface eth1
	 ip address 192.0.3.10/24
	 ipv6 address 2001:db8:2::10/64
	!
	interface eth0
	 ipv6 address 2001:db8:0::10/64
	 ip address 200.17.121.13/24
	!
    }
    canvas c1
    iconcoords {233.0 179.0}
    labelcoords {232.0 162.0}
    interface-peer {eth0 n3}
    services {DefaultRoute SSH UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('server.py', 'index.html', )
	cmdup=('python server.py', )
	meta=Server .
	}
    }
    custom-config {
	custom-config-id service:UserDefined:index.html
	custom-command index.html
	config {
	<!DOCTYPE html>
	<html>
	  <head>
	    <title>Daniel Cloud Server</title>
	  <head>
	  <body>
	    <h1> Bem vindo ao serviço FTP do Daniel </h1>
	    <p>  Acesse seus arquivos de qualquer lugar em um servidor seguro </p>
	    <h2> Recursos: </h2>
	    <ul>
	      <li>Acesse de qualquer lugar</li>
	      <li>Armazene com segunraça</li>   
	      <li>Interface intuitiva</li> 
	    </ul>
	  </body>
	</html>     
	}
    }
    custom-config {
	custom-config-id service:UserDefined:server.py
	custom-command server.py
	config {
	import SocketServer
	import SimpleHTTPServer
	
	class Handler(SimpleHTTPServer.SimpleHTTPRequestHandler):
	  def __init__(self, *args, **kwargs):
	    SimpleHTTPServer.SimpleHTTPRequestHandler.__init__(self, *args, **kwargs)
	
	  def address_string(self):
	    return "200.17.121.13"
	
	PORT = 80
	httpd = SocketServer.TCPServer(("", PORT), Handler)
	
	print "Serving on port 80"
	
	httpd.serve_forever() 
	
	}
    }
    interface-peer {eth1 n6}
}

node n3 {
    type router
    model router
    network-config {
	hostname n3
	!
	interface eth1
	 ip address 192.0.2.1/24
	 ipv6 address 2001:db8:1::1/64
	!
	interface eth0
	 ipv6 address 2001:db8:0::1/64
	 ip address 200.17.121.1/24
	!
    }
    canvas c1
    iconcoords {537.0 463.0}
    labelcoords {537.0 495.0}
    interface-peer {eth0 n1}
    interface-peer {eth1 n4}
}

node n2 {
    type router
    model PC
    network-config {
	hostname User
	!
	interface eth0
	 ip address 192.0.2.20/24
	 ipv6 address 2001:db8:1::20/64
	!
    }
    canvas c1
    iconcoords {818.0 203.0}
    labelcoords {821.0 181.0}
    interface-peer {eth0 n4}
}

node n6 {
    type router
    model PC
    network-config {
	hostname admin
	!
	interface eth0
	 ip address 192.0.3.20/24
	 ipv6 address 2001:db8:2::20/64
	!
    }
    canvas c1
    iconcoords {68.0 275.0}
    labelcoords {68.0 307.0}
    interface-peer {eth0 n1}
}

node n4 {
    type lanswitch
    network-config {
	hostname n4
	!
    }
    canvas c1
    iconcoords {728.0 263.0}
    labelcoords {728.0 287.0}
    interface-peer {e0 n2}
    interface-peer {e1 n3}
}

link l1 {
    nodes {n1 n3}
    bandwidth 0
}

link l2 {
    nodes {n4 n2}
    bandwidth 0
}

link l3 {
    nodes {n4 n3}
    bandwidth 0
}

link l4 {
    nodes {n1 n6}
    bandwidth 0
}

annotation a1 {
    iconcoords {38 105 275 295}
    type rectangle
    label {App}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a4 {
    type text
    iconcoords {197.0 185.0}
    label {}
    canvas c1
}

annotation a3 {
    iconcoords {415 386 669 506}
    type rectangle
    label {Internet}
    labelcolor black
    fontfamily {Arial}
    fontsize 12
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a2 {
    iconcoords {686.0 134.0 881.0 264.0}
    type rectangle
    label {House}
    labelcolor black
    fontfamily {Arial}
    fontsize 12
    color #46c068
    width 0
    border black
    rad 25
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

